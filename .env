GOOGLE_CLIENT_ID=732562519758-gt8p870lmqnfbi2i4r97l2lkmra1k81c.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=s6V1_9HTeJDKGYdIv3V8K6Jw
FACEBOOK_CLIENT_ID=468128151276415
FACEBOOK_CLIENT_SECRET=dd743913ec2c26236fcd96d18e3ca2bb
DB_USER="root"
MYSQL_ROOT_PASSWORD="Temp&123"
DB_HOST="beehaz.cl06yekakn08.eu-west-1.rds.amazonaws.com"
DB_NAME="beehaz_dev"
COMPOSE_PROJECT_NAME=beehaz
STRIPE_KEY="sk_test_51J1ugTCTj9fuhFhw5e1ZQNQmZSmN3OyRNiUeo4JgbPIcuKz2wEPGcSIL3LdLAdt4pEfoNROJKh37NwXUlY8nKUkb00ytxXn4oQ"
STRIPE_ENDPOINT_SECRET="whsec_T85CIUPslWwwDqBJRioun0tRd4myuSVx"
SLACK_TOKEN="xoxb-1720686300724-2216206833296-7ownXL3LEjTA29vqRzOqXpKv"


# In development avoid writing out bytecode to __pycache__ directories.
#PYTHONDONTWRITEBYTECODE=
PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
SECRET_KEY=insecure_key_for_dev

# Which environment is running? These should be "development" or "production".
FLASK_ENV=production
FLASK_DEBUG=false
#FLASK_ENV=development
#FLASK_DEBUG=true

# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#SERVER_NAME=localhost:8000

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#PORT=8000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#WEB_CONCURRENCY=
WEB_CONCURRENCY=1
#PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#WEB_RELOAD=false
WEB_RELOAD=true

# Should the Webpack watcher use polling? Not all Docker hosts support inotify.
# If you find your assets aren't updating in development then set this to true.
#WEBPACK_WATCHER_POLL=false

## What mail server should you connect to?
#MAIL_SERVER=smtp.gmail.com
#MAIL_PORT=587
#MAIL_USE_TLS=true
#MAIL_USE_SSL=false
MAIL_USERNAME=
MAIL_PASSWORD=
#MAIL_DEFAULT_SENDER=contact@local.host

# Should Docker restart your containers if they go down in unexpected ways?
#DOCKER_RESTART_POLICY=unless-stopped
DOCKER_RESTART_POLICY=no

# What healthcheck test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the healthcheck do basically nothing.
#DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change this 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
DOCKER_WEB_PORT_FORWARD=8000

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
DOCKER_REDIS_CPUS="0"
DOCKER_REDIS_MEMORY="0"
DOCKER_WEB_CPUS="0"
DOCKER_WEB_MEMORY="0"
DOCKER_WORKER_CPUS="0"
DOCKER_WORKER_MEMORY="0"

# STRIPE environment variables
STRIPE_LOG=debug
STRIPE_KEY="sk_test_51J1ugTCTj9fuhFhw5e1ZQNQmZSmN3OyRNiUeo4JgbPIcuKz2wEPGcSIL3LdLAdt4pEfoNROJKh37NwXUlY8nKUkb00ytxXn4oQ"
